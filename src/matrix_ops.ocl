__kernel void vector_add_f32(__global const float *a,
                             __global const float *b,
                             __global float *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

/*__kernel void vector_add_f64(__global const double *a,
                             __global const double *b,
                             __global double *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}*/

__kernel void vector_add_i8(__global const char *a,
                             __global const char *b,
                             __global char *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_i16(__global const short *a,
                             __global const short *b,
                             __global short *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_i32(__global const int *a,
                             __global const int *b,
                             __global int *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_i64(__global const long *a,
                             __global const long *b,
                             __global long *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_u8(__global const uchar *a,
                             __global const uchar *b,
                             __global uchar *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_u16(__global const ushort *a,
                             __global const ushort *b,
                             __global ushort *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_u32(__global const uint *a,
                             __global const uint *b,
                             __global uint *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

__kernel void vector_add_u64(__global const ulong *a,
                             __global const ulong *b,
                             __global ulong *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] + b[i];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void vector_sub_f32(__global const float *a,
                             __global const float *b,
                             __global float *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

/*__kernel void vector_sub_f64(__global const double *a,
                             __global const double *b,
                             __global double *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}*/

__kernel void vector_sub_i8(__global const char *a,
                             __global const char *b,
                             __global char *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_i16(__global const short *a,
                             __global const short *b,
                             __global short *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_i32(__global const int *a,
                             __global const int *b,
                             __global int *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_i64(__global const long *a,
                             __global const long *b,
                             __global long *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_u8(__global const uchar *a,
                             __global const uchar *b,
                             __global uchar *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_u16(__global const ushort *a,
                             __global const ushort *b,
                             __global ushort *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_u32(__global const uint *a,
                             __global const uint *b,
                             __global uint *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

__kernel void vector_sub_u64(__global const ulong *a,
                             __global const ulong *b,
                             __global ulong *c) {
	uintptr_t i = get_global_id(0);
	c[i] = a[i] - b[i];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void vector_transpose_f32(__global const float *a,
                                   __global float *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

/*__kernel void vector_transpose_f64(__global const double *a,
                                   __global double *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}*/

__kernel void vector_transpose_i8(__global const char *a,
                                  __global char *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_i16(__global const short *a,
                                   __global short *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_i32(__global const int *a,
                                   __global int *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_i64(__global const long *a,
                                   __global long *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_u8(__global const uchar *a,
                                  __global uchar *b,
                                  const ulong rows,
                                  const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_u16(__global const ushort *a,
                                   __global ushort *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_u32(__global const uint *a,
                                   __global uint *b,
                                   const ulong rows,
                                   const ulong cols) {
	ulong i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}

__kernel void vector_transpose_u64(__global const ulong *a,
                                   __global ulong *b,
                                   const ulong rows,
                                   const ulong cols) {
	uintptr_t i = get_global_id(0);
    ulong row = i / cols;
    ulong col = i % cols;
	b[col*rows + row] = a[i]; // Flip the dimensions
}
